import math
import gc # Retain gc for explicit garbage collection calls if needed for memory management

# Global PICO-8 and game (Celeste) instances, commonly used in PICO-8 style games.
# This avoids passing these objects as arguments to every function.
p8 = None
g = None

# Using const() for frequently accessed integer values can sometimes improve performance
# by allowing MicroPython to optimize these to literal values during compilation.
CONST_TILE_SIZE = const(8)
CONST_MAP_WIDTH_TILES = const(16)
CONST_MAP_HEIGHT_TILES = const(16)
CONST_LEVEL_WIDTH_ROOMS = const(8)
CONST_LEVEL_HEIGHT_ROOMS = const(8)
CONST_ROOM_SIZE_PIXELS = const(CONST_MAP_WIDTH_TILES * CONST_TILE_SIZE) # 128

# Define button constants directly, though PICO8.py already has them.
# Duplicating here for self-containment of Celeste's understanding of buttons.
K_LEFT = const(0)
K_RIGHT = const(1)
K_UP = const(2)
K_DOWN = const(3)
K_JUMP = const(4)
K_DASH = const(5)

class Vector():
  """Simple 2D vector class for position and speed."""
  __slots__ = ('x', 'y') # Use __slots__ to reduce memory footprint for instances

  def __init__(self, x, y):
    self.x = x
    self.y = y

class Rect():
  """Simple rectangle class for hitboxes."""
  __slots__ = ('x', 'y', 'w', 'h') # Use __slots__ to reduce memory footprint

  def __init__(self, x, y, w, h):
    self.x = x
    self.y = y
    self.w = w
    self.h = h

class Celeste():
  def __init__(self, pico8):
    global p8, g
    p8, g = pico8, self

    # game globals
    self.room = Vector(0, 0)
    self.objects = []
    self.freeze = 0
    self.delay_restart = 0
    # Decouple next room from object loop to prevent issues during iteration
    self.next_rm = False

    self.max_djump = 1

    # Mapping tile IDs to object initialization functions
    # Using a tuple of (function, tile_id) could be slightly faster than a dict lookup
    # if iterating through a large number of tiles, but for 256 tiles, dict is fine.
    # The functions are referenced directly to avoid string lookups.
    self.tiles = {
      1: self.player_spawn,
      8: self.key,
      11: self.platform,
      12: self.platform,
      18: self.spring,
      20: self.chest,
      22: self.balloon,
      23: self.fall_floor,
      26: self.fruit,
      28: self.fly_fruit,
      64: self.fake_wall,
    }
    self._map_data = b'\x23\x31\x25\x25\x48\x25\x25\x32\x32\x32\x32\x32\x33\x00\x00\x24\x25\x26\x24\x25\x25\x26\x31\x32\x32\x32\x25\x26\x28\x28\x28\x24\x25\x25\x25\x25\x25\x25\x32\x33\x28\x38\x28\x28\x31\x25\x25\x25\x32\x32\x32\x32\x33\x00\x00\x00\x31\x32\x32\x32\x32\x32\x32\x32\x32\x33\x00\x00\x00\x24\x32\x32\x32\x33\x31\x32\x32\x32\x25\x25\x25\x25\x25\x48\x25\x25\x25\x25\x25\x25\x25\x26\x28\x28\x24\x25\x25\x48\x25\x25\x25\x26\x28\x28\x28\x28\x24\x25\x48\x25\x25\x25\x26\x28\x28\x28\x28\x31\x32\x32\x32\x25\x48\x25\x25\x25\x25\x25\x25\x23\x31\x32\x32\x32\x33\x29\x00\x00\x28\x29\x00\x00\x00\x24\x25\x26\x31\x32\x32\x33\x28\x28\x00\x28\x24\x26\x2a\x10\x28\x24\x25\x48\x25\x25\x25\x26\x00\x2a\x28\x28\x29\x28\x10\x24\x48\x25\x28\x28\x28\x29\x00\x00\x00\x00\x28\x28\x29\x00\x00\x00\x00\x00\x28\x10\x00\x00\x00\x37\x28\x29\x00\x00\x00\x00\x2a\x28\x31\x48\x25\x25\x25\x25\x25\x48\x25\x25\x32\x32\x32\x33\x28\x28\x24\x25\x25\x25\x48\x25\x32\x33\x38\x28\x2a\x28\x31\x32\x25\x25\x48\x25\x26\x28\x38\x28\x28\x28\x2a\x2a\x28\x31\x32\x32\x32\x32\x25\x25\x25\x25\x23\x20\x10\x28\x38\x00\x00\x00\x2a\x00\x00\x00\x3d\x24\x25\x25\x23\x20\x10\x28\x29\x29\x00\x28\x24\x26\x00\x3a\x38\x24\x25\x25\x25\x48\x25\x33\x00\x00\x29\x00\x00\x2a\x00\x31\x25\x25\x28\x38\x29\x00\x00\x3a\x67\x68\x38\x28\x00\x00\x00\x00\x00\x00\x38\x28\x39\x3e\x00\x3a\x28\x00\x00\x00\x00\x00\x00\x28\x00\x24\x25\x25\x32\x32\x32\x32\x32\x33\x21\x22\x22\x23\x28\x28\x24\x25\x25\x25\x32\x33\x28\x28\x28\x29\x00\x00\x2a\x28\x31\x32\x25\x25\x26\x28\x28\x28\x28\x29\x00\x00\x2a\x28\x28\x28\x38\x28\x24\x48\x32\x32\x33\x28\x28\x28\x29\x00\x00\x00\x00\x00\x3f\x20\x20\x24\x48\x25\x26\x28\x28\x29\x00\x00\x00\x2a\x24\x33\x00\x00\x2a\x24\x25\x32\x25\x25\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x25\x29\x00\x00\x00\x00\x21\x22\x23\x28\x28\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x34\x35\x36\x29\x00\x00\x00\x00\x00\x00\x28\x39\x24\x25\x26\x21\x22\x23\x20\x21\x23\x31\x32\x32\x33\x28\x28\x24\x25\x48\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x3b\x24\x25\x26\x28\x28\x28\x00\x00\x00\x00\x00\x28\x28\x28\x28\x28\x24\x25\x23\x40\x28\x38\x28\x29\x3a\x28\x39\x00\x00\x00\x34\x35\x22\x25\x25\x48\x26\x29\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x24\x33\x00\x31\x25\x33\x3d\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x1c\x3a\x3a\x31\x25\x26\x20\x28\x39\x00\x00\x00\x00\x00\x00\x10\x28\x28\x28\x29\x00\x00\x00\x00\x11\x11\x3a\x28\x28\x31\x32\x33\x24\x25\x26\x10\x31\x33\x20\x28\x28\x28\x28\x38\x24\x25\x25\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x24\x25\x26\x2a\x28\x28\x67\x00\x16\x00\x2a\x28\x28\x38\x28\x28\x24\x25\x26\x3a\x28\x28\x28\x10\x28\x29\x00\x00\x00\x00\x00\x00\x31\x25\x25\x32\x33\x00\x00\x00\x00\x11\x00\x00\x37\x00\x00\x00\x3e\x24\x00\x00\x00\x37\x21\x22\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x58\x68\x28\x28\x28\x24\x26\x28\x29\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x29\x00\x00\x00\x00\x00\x00\x21\x23\x28\x38\x28\x29\x28\x28\x31\x32\x33\x28\x28\x29\x00\x2a\x00\x2a\x28\x28\x24\x25\x25\x33\x2b\x0c\x00\x00\x00\x11\x11\x00\x00\x00\x0c\x3b\x31\x48\x26\x11\x28\x10\x00\x00\x00\x00\x68\x28\x28\x28\x28\x28\x24\x25\x25\x22\x35\x35\x36\x28\x28\x00\x00\x00\x00\x00\x00\x3a\x28\x24\x26\x00\x3d\x00\x3a\x39\x00\x27\x00\x00\x00\x00\x00\x00\x21\x25\x00\x1a\x00\x00\x24\x25\x26\x11\x11\x11\x11\x00\x00\x00\x00\x2c\x28\x38\x28\x28\x28\x38\x31\x33\x28\x00\x00\x00\x17\x17\x00\x00\x00\x2a\x00\x00\x00\x00\x11\x11\x00\x00\x24\x26\x10\x28\x29\x00\x28\x28\x1b\x1b\x1b\x28\x28\x00\x00\x00\x00\x00\x2a\x21\x25\x48\x26\x28\x39\x00\x00\x00\x3b\x34\x36\x2b\x00\x00\x00\x00\x28\x24\x25\x23\x28\x28\x3a\x67\x00\x3a\x28\x28\x28\x29\x00\x2a\x31\x32\x25\x33\x38\x28\x28\x29\x00\x00\x00\x00\x00\x00\x00\x28\x38\x24\x25\x23\x20\x20\x10\x29\x00\x30\x39\x00\x00\x00\x00\x58\x24\x48\x00\x00\x00\x3a\x31\x32\x32\x35\x35\x35\x36\x67\x58\x00\x00\x3c\x28\x28\x28\x28\x10\x28\x21\x23\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x36\x00\x3a\x24\x26\x28\x28\x00\x00\x38\x28\x39\x00\x00\x00\x2a\x29\x00\x00\x00\x00\x00\x31\x32\x32\x26\x10\x10\x00\x00\x00\x00\x28\x28\x39\x00\x00\x00\x00\x2a\x24\x25\x33\x28\x28\x28\x38\x00\x28\x28\x28\x39\x00\x00\x00\x17\x00\x26\x00\x00\x2a\x28\x00\x00\x00\x00\x3a\x28\x3a\x28\x28\x28\x24\x25\x25\x22\x23\x28\x39\x00\x37\x28\x58\x39\x00\x68\x28\x31\x32\x00\x00\x00\x28\x28\x28\x28\x28\x20\x20\x28\x28\x28\x39\x21\x22\x28\x29\x00\x2a\x28\x28\x24\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x38\x28\x28\x31\x25\x23\x00\x00\x00\x28\x28\x28\x29\x00\x00\x00\x00\x00\x16\x3a\x67\x68\x28\x28\x00\x33\x38\x28\x0b\x00\x00\x00\x10\x38\x28\x00\x00\x0b\x00\x00\x31\x33\x28\x28\x28\x28\x28\x68\x28\x28\x28\x28\x00\x00\x00\x17\x00\x33\x00\x00\x00\x28\x67\x58\x00\x00\x28\x10\x28\x28\x34\x22\x25\x25\x25\x48\x26\x28\x28\x67\x20\x28\x28\x28\x38\x28\x28\x21\x22\x00\x00\x3a\x28\x38\x28\x10\x29\x00\x00\x2a\x28\x38\x28\x24\x25\x2a\x00\x00\x00\x28\x38\x24\x26\x00\x00\x00\x17\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x27\x28\x28\x2a\x28\x31\x33\x39\x00\x00\x28\x29\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x28\x29\x00\x2a\x28\x39\x00\x00\x00\x00\x2a\x28\x29\x00\x00\x00\x00\x00\x00\x28\x28\x28\x38\x28\x28\x28\x28\x28\x28\x29\x00\x00\x00\x00\x00\x00\x00\x00\x3a\x28\x28\x38\x3e\x3a\x28\x28\x28\x38\x28\x24\x25\x48\x25\x25\x26\x00\x2a\x28\x27\x29\x00\x2a\x28\x28\x34\x32\x25\x00\x00\x00\x2a\x28\x28\x28\x00\x00\x00\x00\x28\x10\x28\x24\x25\x00\x00\x00\x00\x2a\x28\x24\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x37\x28\x00\x00\x00\x2a\x28\x28\x39\x00\x28\x00\x00\x00\x39\x28\x39\x00\x00\x00\x00\x00\x28\x28\x00\x00\x00\x28\x29\x00\x00\x00\x2a\x28\x28\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x28\x28\x10\x28\x28\x28\x28\x67\x58\x00\x00\x00\x00\x00\x00\x00\x28\x38\x28\x28\x21\x23\x28\x00\x00\x2a\x28\x24\x25\x32\x32\x25\x26\x00\x3a\x28\x30\x00\x00\x00\x00\x2a\x28\x28\x24\x00\x00\x00\x00\x00\x2a\x28\x11\x11\x11\x11\x28\x28\x28\x24\x48\x00\x00\x00\x3a\x28\x28\x31\x33\x00\x00\x00\x00\x00\x00\x17\x17\x00\x01\x3f\x00\x00\x00\x20\x29\x00\x00\x00\x00\x38\x28\x00\x00\x28\x01\x3a\x28\x28\x10\x28\x58\x00\x00\x00\x3a\x28\x29\x00\x00\x00\x2a\x28\x0c\x00\x00\x00\x3a\x38\x0c\x00\x00\x00\x00\x00\x0c\x00\x00\x2a\x28\x28\x28\x28\x28\x29\x28\x28\x29\x00\x00\x00\x3a\x00\x01\x3a\x21\x23\x28\x2a\x31\x33\x29\x00\x11\x11\x11\x24\x25\x00\x28\x31\x26\x3a\x38\x29\x30\x00\x00\x00\x00\x00\x00\x2a\x31\x00\x00\x00\x00\x00\x00\x28\x34\x22\x22\x36\x29\x2a\x00\x24\x25\x3e\x01\x3a\x38\x28\x29\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x35\x35\x35\x36\x00\x00\x20\x00\x00\x00\x00\x3d\x2a\x28\x67\x14\x22\x22\x23\x28\x28\x28\x28\x28\x39\x00\x58\x28\x38\x28\x3d\x00\x00\x3a\x29\x00\x00\x00\x00\x28\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x2a\x29\x00\x00\x58\x10\x00\x12\x00\x2a\x28\x22\x22\x22\x25\x26\x29\x00\x21\x23\x11\x11\x21\x22\x22\x25\x25\x00\x2a\x38\x37\x28\x29\x00\x30\x11\x11\x11\x00\x00\x00\x3a\x28\x00\x01\x3f\x00\x00\x00\x2a\x28\x24\x26\x29\x00\x00\x00\x24\x25\x22\x22\x22\x23\x29\x00\x00\x00\x00\x00\x00\x00\x17\x17\x00\x00\x2a\x28\x20\x39\x00\x3a\x20\x00\x00\x3a\x00\x34\x35\x35\x35\x35\x25\x25\x25\x22\x22\x22\x23\x28\x28\x28\x28\x10\x28\x28\x21\x22\x0b\x10\x00\x00\x00\x00\x0b\x28\x10\x00\x00\x00\x0b\x00\x00\x00\x2c\x00\x00\x28\x38\x00\x00\x00\x00\x2a\x28\x39\x17\x00\x00\x28\x25\x48\x25\x25\x26\x11\x11\x24\x25\x22\x22\x25\x25\x25\x48\x25\x00\x01\x2a\x28\x28\x67\x3f\x24\x22\x22\x23\x00\x00\x00\x38\x28\x22\x22\x23\x00\x00\x12\x00\x2a\x24\x26\x00\x00\x00\x12\x24\x25\x25\x25\x25\x26\x00\x00\x00\x00\x17\x17\x00\x00\x00\x00\x00\x00\x00\x38\x20\x28\x39\x28\x27\x08\x00\x28\x67\x68\x20\x28\x28\x28\x25\x48\x25\x25\x25\x25\x26\x2a\x28\x28\x21\x22\x22\x22\x25\x25\x3a\x28\x01\x3d\x00\x00\x00\x68\x28\x39\x00\x00\x00\x00\x00\x00\x3c\x01\x68\x28\x28\x00\x17\x17\x17\x00\x3a\x28\x00\x00\x3a\x28\x25\x25\x25\x25\x25\x22\x22\x25\x25\x25\x25\x25\x25\x25\x25\x25\x22\x22\x22\x22\x22\x22\x22\x25\x25\x48\x26\x67\x58\x68\x28\x28\x25\x48\x26\x00\x00\x27\x00\x00\x24\x26\x00\x00\x00\x21\x25\x25\x25\x25\x48\x26\x17\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x20\x28\x10\x28\x30\x00\x3a\x28\x28\x28\x20\x28\x28\x28\x25\x25\x25\x25\x48\x25\x26\x00\x00\x2a\x24\x25\x25\x25\x48\x25\x28\x21\x22\x23\x00\x00\x00\x28\x28\x28\x00\x00\x00\x00\x00\x00\x22\x22\x22\x23\x28\x67\x00\x00\x00\x00\x28\x28\x39\x00\x28\x38\x25\x32\x33\x00\x00\x00\x24\x32\x32\x32\x32\x32\x32\x32\x25\x25\x25\x25\x26\x28\x28\x28\x28\x24\x25\x32\x32\x32\x32\x25\x48\x25\x25\x32\x32\x32\x32\x32\x32\x32\x25\x26\x28\x28\x28\x24\x48\x25\x25\x25\x25\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52\x25\x25\x32\x32\x32\x32\x33\x31\x32\x32\x32\x32\x33\x28\x29\x00\x26\x28\x29\x28\x67\x00\x00\x00\x00\x00\x28\x28\x31\x32\x32\x32\x25\x25\x25\x32\x33\x28\x28\x00\x31\x25\x25\x48\x25\x25\x25\x48\x25\x25\x48\x26\x28\x38\x28\x31\x32\x32\x32\x32\x32\x32\x25\x48\x26\x28\x28\x00\x00\x00\x30\x40\x2a\x28\x28\x28\x28\x28\x24\x25\x25\x48\x26\x28\x38\x28\x28\x31\x33\x38\x28\x29\x00\x31\x32\x25\x26\x28\x00\x00\x16\x3a\x28\x28\x31\x33\x28\x28\x38\x24\x25\x25\x48\x25\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52\x25\x26\x00\x00\x16\x00\x00\x00\x00\x2a\x10\x28\x28\x38\x39\x00\x26\x28\x1a\x38\x20\x39\x3d\x00\x00\x00\x00\x2a\x38\x28\x28\x28\x25\x25\x26\x28\x28\x28\x29\x00\x3b\x24\x25\x32\x32\x32\x32\x32\x32\x32\x32\x33\x28\x28\x28\x28\x28\x28\x10\x28\x28\x20\x31\x25\x33\x28\x39\x00\x00\x00\x37\x00\x00\x2a\x38\x28\x00\x2a\x24\x25\x25\x25\x26\x28\x28\x28\x28\x20\x28\x29\x2a\x00\x00\x00\x2a\x31\x33\x28\x11\x11\x11\x28\x28\x28\x00\x00\x28\x00\x2a\x31\x25\x25\x25\x25\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52\x25\x26\x00\x00\x00\x00\x11\x11\x00\x00\x00\x29\x2a\x28\x29\x00\x26\x28\x3a\x28\x20\x10\x20\x11\x11\x11\x21\x22\x23\x28\x28\x10\x25\x25\x26\x28\x38\x28\x00\x00\x3b\x24\x26\x2b\x00\x2a\x2a\x38\x28\x28\x28\x28\x28\x29\x00\x2a\x28\x00\x28\x28\x38\x28\x28\x31\x28\x28\x10\x29\x00\x00\x00\x00\x00\x00\x28\x28\x39\x00\x24\x48\x25\x25\x26\x28\x29\x00\x28\x20\x67\x00\x00\x00\x00\x00\x00\x00\x38\x10\x21\x22\x23\x28\x38\x29\x00\x3a\x10\x29\x00\x2a\x24\x25\x32\x32\x33\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x42\x00\x25\x26\x39\x00\x00\x00\x21\x23\x00\x00\x00\x00\x00\x21\x22\x22\x25\x22\x22\x23\x21\x22\x23\x21\x22\x23\x24\x48\x26\x28\x28\x28\x32\x32\x33\x28\x28\x28\x00\x00\x3b\x31\x33\x2b\x00\x00\x00\x28\x10\x28\x29\x00\x00\x00\x00\x00\x29\x00\x2a\x28\x28\x28\x29\x00\x28\x28\x28\x00\x16\x00\x00\x00\x16\x2a\x28\x28\x28\x00\x24\x25\x25\x25\x26\x27\x00\x00\x2a\x20\x29\x00\x00\x00\x00\x00\x00\x00\x28\x34\x25\x25\x33\x29\x2a\x00\x00\x00\x2a\x00\x11\x11\x24\x25\x22\x23\x28\x28\x00\x00\x2c\x46\x47\x2c\x00\x00\x00\x42\x53\x53\x25\x26\x28\x00\x00\x3a\x24\x26\x00\x00\x16\x00\x00\x24\x25\x25\x25\x25\x48\x26\x31\x32\x33\x31\x32\x33\x24\x25\x26\x20\x28\x38\x22\x22\x23\x28\x29\x28\x67\x00\x00\x28\x29\x00\x00\x00\x00\x00\x28\x38\x00\x11\x11\x00\x00\x12\x00\x00\x00\x28\x29\x2a\x16\x00\x28\x38\x28\x00\x00\x00\x00\x00\x00\x00\x3a\x28\x29\x00\x24\x25\x48\x25\x26\x37\x00\x00\x00\x29\x00\x00\x00\x00\x00\x00\x00\x3a\x29\x3b\x24\x26\x28\x39\x00\x00\x00\x00\x00\x3b\x21\x22\x25\x25\x25\x26\x38\x28\x67\x00\x3c\x56\x57\x3c\x42\x43\x43\x53\x63\x63\x32\x33\x28\x39\x00\x28\x24\x26\x11\x11\x11\x11\x11\x24\x25\x25\x25\x48\x25\x26\x20\x1b\x1b\x1b\x1b\x1b\x24\x25\x26\x28\x28\x28\x25\x25\x26\x00\x00\x2a\x28\x14\x3a\x29\x00\x00\x00\x00\x00\x00\x28\x29\x3b\x21\x23\x00\x00\x17\x00\x00\x11\x28\x67\x00\x00\x00\x28\x28\x28\x67\x58\x00\x00\x00\x58\x68\x28\x38\x00\x00\x31\x32\x32\x32\x33\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x27\x28\x28\x00\x3b\x24\x26\x29\x00\x00\x00\x00\x00\x00\x3b\x31\x25\x48\x25\x25\x33\x28\x28\x28\x39\x21\x22\x22\x23\x52\x53\x53\x64\x00\x00\x29\x00\x2a\x28\x38\x28\x31\x32\x35\x35\x35\x35\x22\x25\x48\x25\x25\x25\x25\x25\x23\x00\x00\x00\x00\x00\x31\x32\x33\x28\x10\x28\x48\x25\x26\x11\x11\x11\x34\x35\x36\x11\x11\x11\x11\x00\x00\x00\x00\x00\x3b\x31\x33\x11\x11\x11\x11\x11\x27\x28\x29\x00\x00\x3b\x28\x28\x28\x28\x10\x29\x00\x00\x00\x2a\x28\x28\x67\x00\x00\x28\x35\x35\x35\x36\x11\x11\x00\x00\x00\x00\x00\x00\x11\x30\x28\x38\x00\x3b\x31\x33\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x31\x32\x25\x26\x2a\x28\x28\x10\x28\x24\x25\x25\x26\x62\x63\x64\x00\x00\x00\x00\x16\x00\x28\x28\x28\x29\x00\x00\x00\x00\x00\x31\x32\x25\x25\x25\x25\x25\x25\x26\x67\x58\x00\x00\x00\x20\x00\x00\x2a\x28\x28\x25\x25\x32\x35\x35\x35\x22\x22\x22\x22\x22\x35\x36\x39\x00\x00\x00\x00\x3b\x34\x35\x35\x35\x35\x35\x36\x30\x38\x00\x00\x00\x17\x28\x29\x00\x00\x2a\x00\x00\x00\x00\x00\x38\x2a\x29\x00\x3a\x28\x28\x28\x28\x34\x36\x20\x00\x00\x00\x00\x00\x00\x20\x30\x28\x28\x00\x00\x2a\x29\x00\x00\x11\x11\x00\x00\x00\x00\x28\x28\x28\x31\x26\x00\x29\x00\x2a\x28\x24\x48\x25\x25\x23\x00\x00\x00\x00\x00\x39\x00\x3a\x28\x29\x00\x00\x00\x00\x00\x00\x00\x00\x28\x31\x32\x25\x25\x48\x25\x26\x38\x29\x00\x00\x00\x17\x00\x00\x58\x68\x28\x32\x33\x10\x28\x29\x3b\x24\x48\x25\x25\x26\x28\x28\x28\x00\x00\x00\x00\x3b\x20\x1b\x1b\x1b\x1b\x1b\x1b\x30\x28\x00\x00\x00\x17\x28\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x28\x28\x28\x38\x10\x29\x2a\x00\x00\x00\x00\x00\x00\x00\x2a\x37\x10\x28\x11\x11\x11\x11\x11\x11\x21\x36\x00\x00\x00\x00\x2a\x28\x38\x0b\x26\x00\x00\x00\x00\x21\x25\x25\x25\x25\x26\x00\x1c\x00\x00\x00\x28\x28\x28\x10\x00\x00\x00\x00\x00\x11\x00\x00\x2a\x38\x28\x29\x25\x25\x25\x25\x26\x28\x00\x00\x00\x00\x17\x00\x00\x2a\x21\x22\x28\x28\x29\x08\x00\x3b\x24\x25\x25\x48\x26\x28\x28\x29\x12\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x30\x29\x00\x00\x00\x3b\x38\x29\x00\x00\x00\x00\x00\x00\x00\x3a\x10\x29\x00\x00\x28\x38\x28\x28\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x22\x35\x35\x35\x35\x35\x33\x00\x00\x00\x00\x00\x00\x28\x28\x39\x33\x00\x00\x00\x00\x31\x32\x25\x25\x25\x33\x00\x00\x00\x00\x00\x28\x38\x28\x29\x00\x00\x00\x00\x3b\x20\x2b\x00\x68\x28\x28\x00\x32\x32\x32\x32\x33\x29\x00\x00\x00\x00\x00\x00\x00\x00\x31\x25\x28\x28\x00\x00\x00\x3b\x31\x32\x32\x25\x26\x38\x28\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x37\x00\x00\x00\x00\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x28\x29\x28\x29\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x2a\x33\x28\x38\x28\x28\x29\x00\x00\x00\x00\x00\x00\x00\x10\x28\x28\x00\x00\x00\x00\x42\x43\x44\x24\x25\x26\x28\x39\x00\x00\x00\x00\x28\x00\x2a\x00\x00\x11\x00\x00\x00\x1b\x00\x2a\x20\x10\x29\x2c\x1b\x1b\x1b\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x31\x28\x29\x16\x00\x00\x00\x1b\x1b\x1b\x31\x33\x28\x10\x67\x00\x00\x00\x00\x00\x11\x00\x00\x3a\x27\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x11\x11\x11\x00\x00\x00\x00\x00\x2a\x3a\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x00\x28\x28\x29\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x28\x28\x28\x00\x00\x00\x00\x52\x53\x54\x24\x48\x26\x28\x28\x00\x00\x00\x00\x29\x00\x00\x00\x3b\x20\x2b\x39\x00\x00\x00\x00\x29\x00\x00\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x28\x28\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x1b\x2a\x28\x29\x00\x00\x01\x00\x00\x27\x39\x00\x38\x30\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x20\x11\x11\x11\x21\x22\x23\x00\x00\x00\x12\x12\x00\x2a\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x29\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x67\x68\x28\x29\x00\x00\x3f\x01\x00\x52\x53\x54\x24\x25\x26\x28\x10\x67\x3a\x39\x00\x01\x3f\x00\x00\x00\x2a\x38\x29\x00\x11\x00\x00\x00\x00\x00\x21\x01\x00\x00\x00\x00\x00\x00\x00\x3a\x67\x00\x00\x00\x00\x2a\x38\x28\x67\x58\x68\x00\x00\x01\x00\x00\x00\x00\x68\x28\x00\x00\x00\x21\x23\x00\x37\x28\x29\x28\x30\x00\x00\x00\x00\x00\x00\x00\x00\x22\x22\x22\x22\x22\x23\x24\x48\x26\x11\x11\x11\x20\x20\x11\x11\x00\x27\x39\x00\x00\x17\x17\x00\x00\x00\x17\x17\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x17\x17\x00\x00\x00\x28\x28\x38\x39\x3a\x00\x21\x22\x23\x52\x53\x54\x24\x25\x33\x28\x28\x28\x38\x29\x00\x22\x23\x2b\x00\x00\x08\x28\x39\x3b\x27\x00\x00\x00\x00\x14\x24\x23\x00\x00\x00\x12\x00\x00\x00\x28\x29\x00\x00\x00\x00\x00\x28\x28\x28\x10\x28\x67\x00\x17\x17\x17\x17\x17\x28\x28\x39\x00\x00\x31\x33\x39\x27\x10\x12\x28\x37\x00\x00\x00\x00\x00\x00\x00\x00\x25\x48\x25\x25\x25\x26\x24\x25\x26\x21\x22\x22\x22\x22\x22\x22\x3a\x30\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x17\x00\x00\x00\x00\x00\x00\x00\x3a\x28\x28\x28\x28\x28\x00\x24\x25\x26\x52\x53\x54\x24\x26\x28\x28\x28\x28\x28\x28\x39\x25\x26\x2b\x00\x00\x3a\x28\x10\x3b\x30\x00\x00\x00\x21\x22\x25\x26\x00\x00\x00\x27\x00\x00\x3a\x28\x00\x00\x00\x00\x00\x00\x28\x28\x38\x28\x28\x28\x39\x00\x00\x00\x58\x68\x28\x38\x28\x00\x00\x22\x23\x38\x30\x28\x17\x28\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x24\x25\x25\x25\x25\x48\x25\x33\x29\x00\x00\x31\x32\x32\x32\x25\x32\x32\x32\x32\x32\x25\x32\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x20\x00\x00\x31\x32\x32\x25\x25\x26\x00\x2a\x28\x38\x24\x25\x25\x32\x32\x32\x32\x32\x32\x32\x00\x00\x00\x00\x00\x00\x00\x2a\x10\x28\x29\x00\x31\x32\x32\x25\x63\x63\x63\x64\x52\x53\x53\x53\x54\x55\x00\x00\x00\x55\x52\x53\x25\x48\x25\x25\x26\x2b\x00\x00\x00\x00\x00\x00\x24\x25\x25\x25\x26\x28\x28\x28\x24\x25\x48\x25\x25\x25\x48\x25\x25\x25\x25\x25\x00\x00\x00\x00\x00\x00\x58\x68\x28\x24\x48\x25\x25\x25\x25\x25\x1b\x00\x16\x00\x1b\x1b\x1b\x1b\x30\x1b\x1b\x1b\x1b\x1b\x30\x1b\x00\x00\x00\x00\x00\x00\x00\x11\x11\x20\x00\x00\x00\x2a\x28\x24\x25\x33\x00\x00\x00\x2a\x31\x32\x33\x00\x00\x29\x00\x00\x38\x29\x00\x00\x00\x00\x00\x00\x11\x00\x00\x2a\x00\x00\x00\x2a\x28\x31\x00\x00\x00\x00\x62\x63\x63\x63\x64\x55\x00\x00\x00\x55\x52\x53\x25\x25\x25\x48\x26\x2b\x3a\x00\x00\x00\x00\x00\x24\x25\x48\x25\x26\x28\x38\x28\x31\x32\x32\x32\x32\x32\x32\x32\x25\x25\x48\x25\x00\x00\x00\x00\x00\x00\x2a\x10\x28\x31\x32\x25\x25\x48\x25\x25\x00\x00\x00\x00\x00\x00\x00\x00\x37\x00\x00\x00\x00\x00\x37\x00\x00\x00\x00\x00\x00\x00\x3b\x34\x35\x36\x00\x14\x00\x00\x10\x31\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x3b\x20\x2b\x00\x12\x00\x00\x00\x00\x2a\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x65\x00\x00\x00\x55\x62\x63\x25\x25\x25\x32\x33\x2b\x28\x29\x00\x11\x11\x20\x24\x25\x25\x25\x26\x10\x29\x00\x28\x29\x00\x00\x00\x00\x2a\x28\x31\x25\x25\x25\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x28\x24\x25\x25\x25\x48\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x34\x35\x36\x39\x00\x00\x1b\x26\x72\x73\x73\x73\x73\x73\x73\x73\x73\x73\x74\x11\x00\x00\x16\x00\x00\x00\x11\x00\x00\x1b\x00\x3b\x20\x2b\x00\x00\x00\x16\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x65\x00\x00\x25\x25\x33\x28\x28\x28\x28\x10\x3a\x21\x22\x22\x25\x25\x25\x25\x26\x28\x00\x00\x2a\x00\x11\x11\x11\x00\x00\x28\x38\x24\x25\x25\x00\x00\x00\x00\x00\x00\x00\x39\x3a\x28\x28\x24\x25\x25\x25\x25\x00\x00\x16\x00\x00\x11\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x10\x28\x00\x11\x25\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x22\x23\x2b\x00\x00\x00\x00\x3b\x20\x2b\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x00\x00\x00\x00\x00\x00\x48\x26\x28\x28\x28\x38\x28\x28\x28\x31\x32\x32\x25\x48\x25\x25\x26\x29\x00\x00\x00\x11\x42\x43\x44\x00\x00\x2a\x28\x24\x25\x48\x00\x00\x00\x00\x00\x00\x00\x2a\x28\x38\x28\x24\x48\x25\x25\x25\x00\x00\x00\x00\x3b\x20\x2b\x39\x16\x00\x3b\x20\x2b\x00\x16\x00\x27\x39\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x2a\x28\x39\x21\x25\x48\x25\x25\x25\x25\x25\x32\x32\x32\x32\x32\x26\x2b\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x00\x68\x28\x00\x00\x3a\x00\x00\x00\x00\x25\x26\x28\x28\x10\x2a\x00\x2a\x28\x28\x29\x00\x31\x32\x32\x32\x26\x11\x11\x11\x11\x42\x53\x53\x54\x00\x00\x3b\x21\x25\x25\x25\x00\x00\x00\x00\x00\x00\x00\x00\x28\x28\x28\x31\x32\x32\x32\x32\x28\x00\x00\x3a\x00\x1b\x3a\x28\x39\x00\x00\x1b\x00\x00\x00\x00\x37\x28\x38\x39\x11\x00\x00\x00\x00\x00\x00\x11\x3a\x28\x28\x31\x32\x32\x32\x32\x25\x48\x26\x28\x29\x00\x2a\x10\x37\x2b\x00\x16\x00\x00\x00\x00\x00\x00\x3b\x20\x2b\x00\x00\x16\x00\x00\x00\x00\x00\x00\x3a\x58\x28\x28\x68\x28\x28\x28\x28\x28\x39\x00\x00\x00\x25\x26\x38\x28\x29\x00\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x25\x22\x22\x22\x23\x62\x63\x63\x64\x00\x00\x3b\x24\x25\x25\x25\x00\x00\x00\x11\x11\x11\x11\x3a\x28\x28\x10\x1b\x1b\x1b\x1b\x1b\x28\x39\x28\x28\x39\x00\x28\x28\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x2a\x28\x27\x11\x00\x00\x00\x00\x3b\x27\x28\x28\x38\x1b\x22\x22\x22\x23\x31\x32\x33\x16\x00\x00\x68\x29\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x68\x39\x28\x28\x28\x28\x10\x29\x00\x00\x2a\x10\x28\x3a\x67\x68\x25\x26\x28\x28\x39\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x25\x48\x25\x25\x23\x28\x38\x29\x00\x00\x3b\x24\x48\x25\x25\x00\x00\x68\x21\x22\x22\x23\x28\x38\x28\x28\x39\x00\x00\x00\x00\x28\x28\x28\x28\x28\x38\x28\x29\x00\x00\x00\x00\x00\x00\x16\x00\x11\x00\x3a\x28\x37\x27\x00\x00\x00\x00\x3b\x37\x2a\x28\x29\x11\x25\x25\x48\x26\x38\x28\x2a\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x20\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x00\x16\x28\x28\x28\x2a\x38\x28\x28\x00\x00\x00\x00\x00\x28\x28\x28\x28\x25\x26\x28\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x25\x25\x25\x25\x26\x10\x2a\x00\x00\x00\x3b\x24\x25\x25\x25\x00\x00\x10\x31\x32\x25\x25\x22\x35\x35\x35\x36\x00\x00\x00\x00\x28\x38\x00\x2a\x28\x28\x28\x10\x39\x39\x00\x00\x11\x00\x00\x00\x27\x28\x28\x29\x1b\x30\x39\x00\x00\x00\x00\x1b\x00\x2a\x28\x21\x25\x32\x25\x26\x29\x00\x00\x00\x00\x00\x00\x3a\x00\x00\x00\x00\x00\x34\x35\x35\x35\x35\x35\x35\x35\x35\x35\x35\x35\x36\x2b\x00\x28\x28\x29\x00\x28\x28\x29\x00\x60\x61\x00\x3a\x28\x38\x28\x2a\x48\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x48\x25\x25\x25\x26\x29\x00\x00\x11\x11\x11\x24\x25\x25\x25\x00\x00\x2a\x28\x28\x31\x32\x26\x1b\x1b\x1b\x1b\x00\x00\x00\x00\x29\x00\x00\x00\x00\x2a\x28\x28\x28\x28\x39\x3b\x27\x2b\x00\x00\x37\x28\x10\x00\x11\x30\x28\x3a\x00\x00\x00\x11\x00\x28\x28\x31\x26\x01\x31\x33\x16\x00\x00\x00\x00\x00\x00\x28\x39\x00\x00\x00\x00\x20\x28\x38\x28\x28\x28\x20\x28\x28\x28\x28\x28\x27\x2b\x00\x38\x28\x00\x00\x2a\x28\x3d\x00\x70\x71\x3f\x28\x28\x29\x00\x00\x25\x26\x00\x00\x00\x00\x00\x00\x39\x00\x00\x00\x00\x00\x00\x00\x25\x25\x25\x25\x48\x26\x00\x00\x3b\x21\x22\x23\x31\x25\x48\x25\x00\x00\x00\x28\x38\x29\x3b\x30\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x28\x28\x28\x3b\x30\x2b\x00\x00\x1b\x2a\x28\x38\x27\x30\x28\x10\x39\x00\x00\x27\x3a\x28\x29\x1b\x26\x17\x00\x00\x00\x00\x00\x00\x39\x00\x00\x38\x28\x00\x00\x00\x00\x1b\x2a\x28\x28\x10\x28\x1b\x2a\x28\x38\x2a\x28\x37\x2b\x00\x28\x28\x39\x00\x00\x28\x21\x22\x23\x21\x22\x23\x28\x00\x00\x3a\x32\x33\x00\x00\x00\x00\x00\x00\x28\x29\x00\x00\x00\x00\x00\x00\x32\x32\x32\x32\x32\x33\x00\x00\x3b\x24\x25\x25\x23\x31\x25\x25\x00\x00\x00\x2a\x28\x00\x3b\x37\x00\x00\x00\x00\x3a\x27\x00\x00\x00\x01\x00\x00\x00\x11\x11\x11\x11\x28\x38\x3b\x37\x2b\x00\x3a\x00\x00\x28\x28\x37\x30\x29\x00\x28\x38\x00\x37\x28\x38\x00\x11\x26\x39\x00\x00\x00\x00\x00\x00\x28\x00\x00\x28\x28\x29\x00\x00\x00\x00\x00\x29\x16\x2a\x28\x00\x00\x28\x16\x00\x28\x28\x00\x00\x10\x29\x00\x00\x00\x20\x31\x32\x33\x24\x48\x26\x28\x42\x43\x43\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x58\x68\x00\x00\x00\x38\x28\x28\x29\x00\x00\x00\x00\x3b\x24\x25\x48\x25\x23\x31\x32\x00\x00\x01\x00\x28\x00\x00\x28\x00\x00\x00\x2a\x28\x30\x00\x00\x22\x22\x23\x11\x11\x21\x35\x35\x36\x10\x28\x28\x29\x00\x00\x38\x00\x00\x29\x00\x1b\x30\x00\x00\x2a\x28\x00\x00\x28\x28\x00\x21\x26\x28\x29\x00\x00\x00\x00\x3a\x28\x29\x00\x28\x28\x00\x00\x00\x00\x58\x68\x00\x00\x28\x28\x3a\x28\x28\x39\x00\x28\x29\x16\x00\x28\x00\x01\x00\x00\x21\x22\x22\x22\x25\x25\x25\x23\x52\x53\x53\x00\x00\x00\x3f\x01\x00\x00\x3a\x28\x00\x00\x2a\x10\x00\x00\x00\x28\x29\x00\x00\x00\x00\x39\x00\x3b\x24\x25\x25\x25\x25\x22\x22\x40\x00\x21\x22\x23\x2b\x00\x38\x39\x12\x00\x68\x38\x30\x39\x00\x25\x48\x25\x22\x22\x26\x0c\x00\x2a\x28\x28\x28\x00\x00\x3a\x28\x01\x00\x00\x00\x3a\x37\x08\x00\x00\x28\x39\x00\x28\x29\x00\x31\x26\x28\x00\x00\x00\x00\x00\x28\x38\x00\x3a\x28\x10\x00\x00\x00\x00\x2a\x28\x28\x28\x29\x2a\x28\x28\x38\x28\x28\x28\x00\x00\x00\x43\x43\x43\x43\x44\x24\x25\x48\x25\x25\x25\x25\x26\x52\x53\x53\x00\x00\x00\x21\x36\x00\x00\x38\x28\x39\x00\x00\x28\x00\x1c\x00\x28\x01\x3d\x3e\x00\x3a\x28\x00\x3b\x24\x25\x25\x25\x48\x25\x25\x21\x23\x24\x25\x26\x2b\x68\x28\x28\x27\x28\x28\x10\x30\x28\x00\x25\x25\x25\x25\x48\x26\x00\x00\x00\x28\x28\x29\x00\x00\x28\x28\x23\x00\x00\x00\x38\x28\x39\x00\x00\x2a\x28\x10\x28\x00\x00\x1b\x26\x38\x39\x00\x00\x00\x00\x28\x28\x00\x28\x28\x28\x39\x00\x00\x00\x00\x00\x38\x28\x00\x00\x00\x2a\x28\x10\x28\x00\x00\x00\x00\x53\x53\x53\x53\x54\x24\x25\x25\x25\x25\x25\x48\x26\x52\x53\x53\x00\x00\x00\x30\x42\x44\x00\x28\x28\x28\x00\x00\x28\x39\x00\x00\x22\x22\x22\x23\x10\x28\x38\x39\x3b\x24\x25\x25\x25\x25\x25\x25\x25\x25\x25\x25\x25\x26\x2b\x1b\x1b\x1b\x31\x32\x32\x25\x26\x00\x48\x25\x32\x32\x32\x32\x32\x32\x25\x25\x32\x32\x32\x33\x28\x28\x25\x25\x25\x25\x25\x25\x25\x25\x25\x25\x48\x25\x32\x33\x2b\x28\x32\x32\x32\x32\x32\x25\x26\x28\x28\x00\x00\x3b\x24\x25\x25\x25\x25\x48\x25\x25\x25\x25\x25\x48\x48\x25\x25\x25\x26\x38\x28\x24\x25\x48\x25\x25\x32\x33\x28\x28\x29\x24\x25\x32\x32\x32\x25\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x25\x25\x48\x25\x26\x2b\x00\x00\x00\x1b\x1b\x1b\x24\x26\x00\x32\x33\x28\x67\x00\x00\x00\x28\x24\x33\x2b\x2a\x28\x10\x28\x38\x25\x25\x25\x48\x25\x25\x32\x32\x32\x32\x25\x26\x1b\x1b\x00\x38\x29\x01\x00\x3a\x28\x24\x26\x38\x29\x00\x00\x3b\x24\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x32\x25\x26\x10\x28\x31\x25\x25\x32\x33\x1b\x1b\x10\x28\x14\x31\x33\x38\x28\x28\x24\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x25\x25\x25\x25\x26\x2b\x00\x00\x00\x00\x00\x2a\x24\x26\x67\x28\x28\x38\x29\x00\x00\x11\x2a\x37\x2b\x00\x3a\x28\x27\x29\x00\x25\x25\x25\x25\x25\x33\x1b\x1b\x1b\x1b\x31\x33\x00\x00\x00\x28\x35\x35\x35\x36\x28\x24\x26\x28\x14\x00\x00\x3b\x30\x28\x2a\x2a\x1a\x28\x29\x00\x2a\x28\x38\x28\x28\x10\x28\x24\x26\x00\x2a\x38\x25\x26\x1b\x1b\x00\x00\x38\x21\x23\x2b\x00\x00\x08\x10\x24\x25\x00\x00\x00\x00\x00\x00\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x48\x25\x32\x32\x33\x2b\x00\x00\x00\x11\x00\x28\x24\x26\x29\x28\x10\x2a\x00\x00\x3b\x27\x00\x29\x00\x00\x00\x38\x30\x00\x00\x32\x32\x25\x25\x26\x2b\x00\x00\x00\x00\x3b\x27\x00\x00\x3a\x28\x28\x28\x38\x28\x28\x24\x25\x22\x23\x2b\x00\x3b\x37\x29\x08\x00\x00\x10\x00\x11\x00\x29\x2a\x28\x29\x11\x2a\x31\x33\x00\x3a\x28\x25\x26\x2b\x00\x00\x00\x2a\x31\x33\x2b\x00\x00\x68\x28\x24\x25\x00\x00\x00\x00\x00\x00\x10\x00\x00\x39\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x25\x26\x21\x22\x23\x2b\x00\x3a\x67\x27\x2b\x2a\x24\x26\x38\x28\x29\x00\x00\x00\x3b\x30\x00\x00\x00\x00\x3a\x28\x30\x00\x00\x22\x23\x31\x32\x33\x2b\x00\x00\x00\x00\x3b\x30\x28\x39\x00\x2a\x38\x28\x29\x10\x29\x24\x48\x25\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x2a\x3b\x20\x2b\x3a\x16\x28\x3b\x20\x2b\x00\x11\x00\x00\x28\x25\x26\x2b\x00\x00\x00\x00\x1b\x1b\x00\x00\x2a\x38\x2a\x24\x25\x00\x00\x00\x00\x3a\x00\x28\x00\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x49\x4a\x4b\x4c\x4d\x4e\x4f\x00\x00\x00\x00\x25\x25\x26\x24\x48\x26\x2b\x00\x2a\x38\x30\x2b\x12\x24\x26\x29\x38\x00\x00\x00\x00\x3b\x30\x00\x00\x00\x00\x00\x2a\x30\x3e\x14\x25\x25\x22\x22\x23\x2b\x00\x00\x00\x00\x3b\x30\x29\x00\x00\x00\x28\x29\x00\x00\x00\x24\x25\x25\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x2a\x28\x28\x00\x1b\x00\x3b\x20\x2b\x11\x2a\x25\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x29\x3b\x24\x48\x00\x00\x00\x00\x28\x67\x28\x00\x00\x10\x00\x39\x00\x00\x00\x00\x00\x00\x00\x00\x00\x59\x5a\x5b\x5c\x5d\x5e\x5f\x00\x00\x00\x00\x32\x32\x33\x31\x32\x26\x2b\x12\x00\x28\x30\x2b\x17\x31\x33\x00\x28\x39\x58\x68\x39\x3b\x30\x11\x11\x11\x11\x11\x11\x24\x22\x22\x25\x25\x48\x25\x26\x2b\x00\x00\x11\x00\x3b\x30\x2b\x00\x00\x00\x28\x11\x11\x11\x11\x24\x25\x48\x26\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x10\x67\x58\x11\x00\x1b\x3b\x20\x16\x48\x26\x11\x11\x11\x11\x00\x00\x00\x16\x00\x00\x00\x3b\x31\x25\x00\x00\x00\x00\x28\x38\x28\x76\x00\x28\x67\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x69\x6a\x6b\x6c\x6d\x6e\x6f\x00\x00\x00\x00\x28\x00\x00\x00\x2a\x30\x11\x27\x00\x2a\x30\x2b\x00\x10\x10\x39\x28\x28\x38\x28\x34\x35\x32\x35\x35\x35\x35\x35\x35\x25\x25\x48\x25\x25\x25\x25\x26\x2b\x00\x3b\x27\x00\x3b\x30\x2b\x00\x00\x00\x28\x34\x35\x35\x35\x32\x32\x25\x26\x2b\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x20\x28\x28\x38\x27\x2b\x16\x00\x1b\x00\x25\x25\x23\x21\x22\x23\x2b\x00\x00\x00\x00\x00\x00\x00\x1b\x24\x00\x00\x00\x00\x2a\x28\x28\x21\x23\x28\x38\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x79\x7a\x7b\x7c\x7d\x7e\x7f\x00\x00\x00\x00\x29\x00\x11\x00\x00\x31\x35\x26\x2b\x00\x31\x35\x35\x35\x35\x35\x29\x00\x2a\x00\x00\x10\x28\x28\x28\x28\x29\x00\x3b\x24\x25\x25\x32\x32\x32\x32\x26\x2b\x16\x3b\x30\x00\x3b\x30\x00\x00\x00\x00\x29\x1b\x1b\x1b\x1b\x1b\x3b\x24\x26\x2b\x00\x3b\x27\x2b\x00\x00\x00\x11\x00\x00\x00\x00\x1b\x2a\x28\x28\x37\x2b\x00\x00\x00\x00\x32\x32\x33\x31\x32\x33\x2b\x00\x00\x11\x11\x00\x00\x00\x3b\x24\x00\x00\x00\x68\x38\x28\x21\x25\x25\x23\x28\x39\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x27\x2b\x00\x2a\x38\x30\x2b\x00\x00\x00\x2a\x28\x39\x3b\x00\x00\x00\x00\x00\x00\x2a\x28\x38\x28\x28\x67\x21\x25\x25\x25\x1b\x1b\x1b\x1b\x37\x2b\x00\x3b\x30\x39\x3b\x30\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x24\x26\x2b\x17\x3b\x30\x2b\x00\x00\x3b\x20\x2b\x11\x00\x00\x00\x11\x00\x29\x1b\x00\x00\x00\x00\x3a\x1b\x1b\x1b\x1b\x1b\x1b\x00\x11\x11\x21\x23\x11\x00\x00\x3b\x24\x00\x00\x00\x2a\x28\x21\x25\x48\x25\x25\x23\x28\x38\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x3b\x30\x2b\x00\x00\x28\x30\x11\x11\x11\x11\x00\x28\x38\x3b\x11\x11\x11\x11\x11\x00\x00\x28\x29\x00\x29\x28\x24\x25\x48\x25\x00\x00\x00\x3a\x28\x00\x00\x3b\x30\x28\x3b\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x24\x26\x11\x11\x11\x30\x2b\x00\x00\x00\x1b\x3b\x20\x2b\x00\x3b\x27\x2b\x00\x00\x00\x00\x00\x00\x28\x2b\x01\x00\x00\x00\x00\x3b\x21\x22\x25\x32\x36\x2b\x00\x3b\x31\x58\x58\x68\x28\x29\x24\x25\x25\x25\x25\x26\x10\x28\x28\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x37\x2b\x00\x00\x2a\x31\x35\x35\x35\x36\x00\x28\x29\x3b\x22\x22\x22\x22\x23\x11\x11\x20\x2b\x00\x00\x2a\x31\x32\x25\x25\x00\x00\x00\x10\x38\x29\x00\x3b\x30\x28\x28\x28\x00\x00\x00\x00\x11\x11\x11\x11\x39\x00\x11\x24\x25\x22\x22\x22\x33\x2b\x00\x00\x01\x00\x00\x1b\x00\x00\x3b\x30\x2b\x00\x00\x00\x00\x58\x68\x28\x2b\x17\x00\x00\x00\x00\x3b\x24\x25\x33\x1b\x1b\x00\x00\x00\x1b\x28\x10\x28\x38\x00\x31\x32\x25\x25\x48\x26\x29\x00\x2a\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x1b\x00\x00\x00\x00\x1b\x1b\x1b\x1b\x1b\x00\x2a\x00\x3b\x32\x32\x32\x32\x32\x35\x36\x1b\x00\x00\x00\x00\x1b\x1b\x31\x25\x00\x00\x00\x00\x28\x00\x00\x3b\x30\x28\x38\x29\x00\x00\x00\x00\x22\x22\x22\x23\x28\x38\x34\x32\x32\x32\x32\x33\x2b\x00\x00\x00\x23\x39\x00\x00\x00\x00\x3b\x37\x2b\x00\x00\x00\x00\x2a\x10\x28\x11\x11\x11\x11\x00\x00\x3b\x31\x33\x1b\x00\x3a\x00\x16\x00\x00\x00\x2a\x28\x39\x3f\x21\x23\x24\x25\x32\x33\x20\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x29\x00\x00\x01\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x39\x01\x3d\x00\x00\x2a\x28\x00\x00\x00\x00\x00\x00\x00\x28\x24\x00\x00\x00\x68\x28\x67\x00\x3b\x30\x00\x2a\x28\x67\x00\x00\x00\x25\x25\x25\x26\x00\x28\x28\x00\x3a\x10\x28\x2a\x00\x16\x00\x3a\x26\x28\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x39\x3a\x28\x38\x28\x22\x22\x22\x23\x2b\x00\x00\x1b\x1b\x00\x00\x38\x00\x00\x00\x68\x00\x00\x21\x22\x22\x25\x26\x31\x33\x21\x22\x23\x28\x39\x28\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x67\x58\x3a\x21\x22\x23\x11\x11\x11\x11\x11\x00\x12\x00\x3b\x22\x22\x23\x39\x00\x10\x28\x39\x00\x00\x00\x00\x08\x3a\x10\x31\x01\x00\x3a\x38\x28\x29\x00\x3b\x37\x00\x00\x38\x29\x00\x00\x00\x25\x48\x25\x26\x00\x2a\x28\x28\x28\x38\x29\x00\x00\x00\x00\x28\x26\x38\x39\x12\x00\x00\x00\x00\x00\x00\x3a\x28\x28\x28\x28\x10\x25\x48\x25\x26\x2b\x16\x00\x00\x39\x00\x00\x28\x3a\x00\x3a\x28\x01\x00\x31\x25\x25\x48\x25\x22\x22\x25\x25\x25\x23\x10\x38\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x38\x28\x28\x24\x25\x25\x22\x22\x22\x22\x23\x00\x17\x00\x3b\x25\x25\x26\x28\x3a\x28\x38\x28\x00\x00\x00\x00\x00\x38\x28\x28\x23\x00\x10\x28\x28\x00\x00\x00\x38\x00\x00\x28\x10\x00\x00\x00\x25\x25\x25\x26\x17\x17\x28\x38\x28\x00\x00\x00\x00\x00\x3a\x28\x26\x28\x10\x27\x39\x00\x00\x00\x00\x2a\x28\x28\x38\x28\x28\x28\x25\x25\x48\x26\x2b\x00\x00\x3a\x38\x00\x3a\x28\x10\x28\x38\x28\x21\x22\x23\x24\x25\x25\x25\x25\x25\x25\x48\x25\x25\x22\x22\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    self._flag_data = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x02\x02\x00\x00\x00\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x02\x02\x02\x02\x02\x00\x00\x13\x13\x13\x13\x02\x02\x03\x02\x02\x02\x02\x02\x00\x02\x00\x00\x13\x13\x13\x13\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x00\x00\x13\x13\x13\x13\x00\x04\x04\x02\x02\x02\x02\x02\x02\x02\x00\x00\x13\x13\x13\x13\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00';

  # entry point

  def _init(self):
    """
    Initializes the game state when the cartridge is loaded or reset.
    """
    self.frames = 0
    self.load_room(0, 0)
    gc.collect() # Trigger garbage collection after initial setup

  # main update loop

  def _update(self):
    """
    Performs one game update step. This is where all game logic is processed.
    Optimized: Removed logging, direct attribute access, lazy object destruction.
    """
    self.frames = (self.frames + 1) % 30

    if self.freeze > 0:
      self.freeze -= 1
      return

    if self.delay_restart > 0:
      self.delay_restart -= 1
      if self.delay_restart == 0:
        self.load_room(self.room.x, self.room.y)

    # Iterate through objects and update them.
    # The loop iterates over a copy of the list to allow safe modification during iteration.
    # 'None' objects are lazy-removed after the loop.
    for o in list(self.objects): # Iterate over a copy to allow safe removal of 'None'
      if o is not None:
        o.move(o.spd.x, o.spd.y)
        if hasattr(o, 'update') and callable(o.update):
          o.update()

    # Handle room change after all objects have been updated
    if self.next_rm:
      self.next_rm = False
      lvl_id = self.level_index()
      # Store current number of objects before loading new room for simulating loading jank
      n_objs_before_load = len(self.objects)
      self.load_room(lvl_id % CONST_LEVEL_WIDTH_ROOMS, math.floor(lvl_id / CONST_LEVEL_WIDTH_ROOMS))
      
      # Simulate loading jank by updating new objects
      # This part might need further optimization if it causes lag
      if lvl_id > 0: # Only if not the first level
        for o in self.objects[n_objs_before_load:]: # Iterate over newly added objects
          if o is not None:
            o.move(o.spd.x, o.spd.y)
            if hasattr(o, 'update') and callable(o.update):
              o.update()
    
    # Efficiently remove destroyed (None) objects
    self.objects = [o for o in self.objects if o is not None]
    gc.collect() # Periodically collect garbage after significant list modifications

  # main draw loop (not actually for drawing, but for object-specific draw calls)

  def _draw(self):
    """
    Calls the draw method for each active game object.
    On a microcontroller, this would typically update a display buffer.
    """
    if self.freeze > 0:
      return

    for o in self.objects:
      if o is not None and hasattr(o, 'draw') and callable(o.draw):
        o.draw()

  # room stuff

  def level_index(self):
    """Calculates the linear index of the current room."""
    return self.room.x + self.room.y * CONST_LEVEL_WIDTH_ROOMS

  def restart_room(self):
    """Sets a delay to restart the current room."""
    self.delay_restart = 15

  def next_room(self, loop=False):
    """
    Prepares for loading the next room.
    Optimized: Direct integer arithmetic.
    """
    current_lvl_id = self.level_index()
    next_lvl_id = (current_lvl_id + 1) % (CONST_LEVEL_WIDTH_ROOMS * CONST_LEVEL_HEIGHT_ROOMS)
    self.room.x = next_lvl_id % CONST_LEVEL_WIDTH_ROOMS
    self.room.y = math.floor(next_lvl_id / CONST_LEVEL_WIDTH_ROOMS)
    self.next_rm = True # Flag to load room in the next update cycle

  def load_room(self, x, y):
    """
    Loads objects for a given room coordinates.
    Optimized: Clears list and re-populates to avoid stale objects.
    """
    self.has_dashed = False
    self.has_key = False
    self.objects = [] # Clear the existing objects list
    self.room.x = x
    self.room.y = y
    
    # Iterate through room tiles and initialize objects based on tile ID
    for ty in range(CONST_MAP_HEIGHT_TILES):
      for tx in range(CONST_MAP_WIDTH_TILES):
        tile_x_on_map = self.room.x * CONST_MAP_WIDTH_TILES + tx
        tile_y_on_map = self.room.y * CONST_MAP_HEIGHT_TILES + ty
        tile = p8.mget(tile_x_on_map, tile_y_on_map)
        
        if tile in self.tiles:
          self.init_object(self.tiles[tile], tx * CONST_TILE_SIZE, ty * CONST_TILE_SIZE, tile)
    gc.collect() # Collect garbage after loading a new room

  # object base class

  class base_obj():
    """
    Base class for all game objects.
    Optimized: Using __slots__ for memory efficiency.
    """
    __slots__ = ('collideable', 'solids', 'spr', 'flip', 'x', 'y', 'hitbox', 'spd', 'rem')

    def __init__(self, x, y, tile=None):
      self.collideable = True
      self.solids = False
      self.spr = tile # Sprite ID, 0 usually means hidden/suppressed
      self.flip = Vector(False, False) # For horizontal/vertical flipping of sprite
      self.x = x
      self.y = y
      self.hitbox = Rect(0, 0, CONST_TILE_SIZE, CONST_TILE_SIZE) # Default 8x8 hitbox
      self.spd = Vector(0.0, 0.0) # Speed vector (float)
      self.rem = Vector(0.0, 0.0) # Remainder from movement (float)

    def is_solid(self, ox, oy):
      """
      Checks if there's a solid tile or object at an offset from this object.
      Optimized: Direct attribute access.
      """
      # Check for special platform collision from above
      if oy > 0 and not self.check(g.platform, ox, 0) and self.check(g.platform, ox, oy):
        return True
      
      # Check for tile flags (solid, fall_floor, fake_wall)
      return g.tile_flag_at(self.x + self.hitbox.x + ox, self.y + self.hitbox.y + oy, self.hitbox.w, self.hitbox.h, 0)\
        or self.check(g.fall_floor, ox, oy)\
        or self.check(g.fake_wall, ox, oy)

    def is_ice(self, ox, oy):
      """Checks if there's an ice tile at an offset."""
      return g.tile_flag_at(self.x + self.hitbox.x + ox, self.y + self.hitbox.y + oy, self.hitbox.w, self.hitbox.h, 4)

    def check(self, obj_type, ox, oy):
      """
      Checks for collision with a specific object type at an offset.
      Optimized: Iterates over the object list, checks type directly.
      """
      for other in g.objects:
        if other is not None and isinstance(other, obj_type) and other is not self and other.collideable:
          # Check for bounding box intersection
          if (other.x + other.hitbox.x + other.hitbox.w > self.x + self.hitbox.x + ox and
              other.y + other.hitbox.y + other.hitbox.h > self.y + self.hitbox.y + oy and
              other.x + other.hitbox.x < self.x + self.hitbox.x + self.hitbox.w + ox and
              other.y + other.hitbox.y < self.y + self.hitbox.y + self.hitbox.h + oy):
            return other
      return None

    def move(self, ox, oy):
      """
      Moves the object, handling sub-pixel movement and collision.
      Optimized: Uses math.floor for consistent integer conversion.
      """
      # Handle X movement
      self.rem.x += ox
      amt_x = int(self.rem.x + 0.5) # Equivalent to round() but using int and +0.5 for positive
      self.rem.x -= amt_x
      self.move_x(amt_x, 0)

      # Handle Y movement
      self.rem.y += oy
      amt_y = int(self.rem.y + 0.5) # Equivalent to round()
      self.rem.y -= amt_y
      self.move_y(amt_y)

    def move_x(self, amt, start):
      """
      Performs horizontal movement with solid collision checks.
      """
      if self.solids:
        step = g.sign(amt)
        # Iterate step by step for collision detection
        for _ in range(abs(amt)): # Loop abs(amt) times
          if not self.is_solid(step, 0):
            self.x += step
          else:
            self.spd.x = 0.0
            self.rem.x = 0.0
            break
      else:
        self.x += amt

    def move_y(self, amt):
      """
      Performs vertical movement with solid collision checks.
      """
      if self.solids:
        step = g.sign(amt)
        # Iterate step by step for collision detection
        for _ in range(abs(amt)): # Loop abs(amt) times
          if not self.is_solid(0, step):
            self.y += step
          else:
            self.spd.y = 0.0
            self.rem.y = 0.0
            break
      else:
        self.y += amt

  # Removed __str__ method for base_obj to save memory and avoid debug printing on MCU.

  # objects - each class inherits from base_obj and defines specific behaviors

  class player_spawn(base_obj):
    """Handles the player's initial spawning animation."""
    def init(self):
      self.target = self.y
      self.y = CONST_ROOM_SIZE_PIXELS # Start below the screen
      self.spd.y = -4.0
      self.state = 0 # 0: jumping up, 1: falling, 2: landing
      self.delay = 0

    def update(self):
      if self.state == 0: # Jumping up
        if self.y < self.target + 16:
          self.state = 1
          self.delay = 3
      elif self.state == 1: # Falling
        self.spd.y += 0.5
        if self.spd.y > 0.0:
          if self.delay > 0:
            self.spd.y = 0.0 # Stall at peak
            self.delay -= 1
          elif self.y > self.target:
            self.y = self.target # Clamp at target y
            self.spd.x = 0.0
            self.spd.y = 0.0
            self.state = 2
            self.delay = 5
      elif self.state == 2: # Landing and spawning player
        self.delay -= 1
        if self.delay < 0:
          g.destroy_object(self)
          g.init_object(g.player, self.x, self.y)

  class player(base_obj):
    """The main player character."""
    def init(self):
      self.p_jump = False # Previous jump button state
      self.p_dash = False # Previous dash button state
      self.grace = 0      # Grace frames for jumping after leaving ground
      self.jbuffer = 0    # Jump buffer to allow pre-pressing jump
      self.djump = 1      # Double jump counter
      self.dash_time = 0  # Timer for dash duration
      self.dash_effect_time = 0 # Timer for dash-related effects (e.g., breaking blocks)
      self.hitbox = Rect(1, 3, 6, 5) # Smaller hitbox for player collision
      self.solids = True  # Player collides with solid tiles

    def update(self):
      # Horizontal input
      h_input = 0
      if p8.btn(K_RIGHT): h_input = 1
      elif p8.btn(K_LEFT): h_input = -1

      # Spike collision
      if g.spikes_at(self.x + self.hitbox.x, self.y + self.hitbox.y, self.hitbox.w, self.hitbox.h, self.spd.x, self.spd.y):
        g.kill_player(self)

      # Bottom death
      if self.y > CONST_ROOM_SIZE_PIXELS:
        g.kill_player(self)

      # On ground check
      on_ground = self.is_solid(0, 1)

      # Jump and dash input
      jump = p8.btn(K_JUMP) and not self.p_jump
      dash = p8.btn(K_DASH) and not self.p_dash
      self.p_jump = p8.btn(K_JUMP)
      self.p_dash = p8.btn(K_DASH)

      # Jump buffer
      if jump:
        self.jbuffer = 4
      elif self.jbuffer > 0:
        self.jbuffer -= 1

      # Grace frames and dash restoration
      if on_ground:
        self.grace = 6
        self.djump = g.max_djump
      elif self.grace > 0:
        self.grace -= 1

      # Dash effect timer
      self.dash_effect_time -= 1

      if self.dash_time > 0:
        self.dash_time -= 1
        self.spd.x = g.appr(self.spd.x, self.dash_target.x, self.dash_accel.x)
        self.spd.y = g.appr(self.spd.y, self.dash_target.y, self.dash_accel.y)
      else:
        maxrun = 1.0
        # Use simple if/else for conditional acceleration
        if on_ground:
          accel = 0.6 if not self.is_ice(0, 1) else 0.05
        else:
          accel = 0.4
        deccel = 0.15

        # Set x speed
        if abs(self.spd.x) <= 1:
            self.spd.x = g.appr(self.spd.x, h_input * maxrun, accel)
        else:
            self.spd.x = g.appr(self.spd.x, g.sign(self.spd.x) * maxrun, deccel)

        # Facing direction
        if self.spd.x != 0:
          self.flip.x = self.spd.x < 0

        # Terminal velocity + wall sliding
        maxfall = 2.0
        if h_input != 0 and self.is_solid(h_input, 0) and not self.is_ice(h_input, 0):
            maxfall = 0.4

        # Apply gravity
        if not on_ground:
          # Faster fall if current speed is low, to prevent float precision issues keeping it suspended
          if abs(self.spd.y) > 0.15:
              self.spd.y = g.appr(self.spd.y, maxfall, 0.21)
          else:
              self.spd.y = g.appr(self.spd.y, maxfall, 0.105)

        # Jump
        if self.jbuffer > 0:
          if self.grace > 0:
            self.jbuffer = 0
            self.grace = 0
            self.spd.y = -2.0
          else:
            wall_dir = 0
            if self.is_solid(-3, 0):
                wall_dir = -1
            elif self.is_solid(3, 0):
                wall_dir = 1
            
            if wall_dir != 0:
              self.jbuffer = 0
              self.spd.y = -2.0
              self.spd.x = float(-wall_dir * (maxrun + 1)) # Explicit float conversion

        # Dash
        D_FULL = 5.0
        D_HALF = 3.5355339059 # Approximation of 5 / sqrt(2)

        if self.djump > 0 and dash:
          self.djump -= 1
          self.dash_time = 4
          g.has_dashed = True
          self.dash_effect_time = 10
          
          # Vertical input
          v_input = 0
          if p8.btn(K_UP): v_input = -1
          elif p8.btn(K_DOWN): v_input = 1
          
          # Calculate dash speeds
          if h_input != 0:
            self.spd.x = float(h_input * (D_FULL if v_input == 0 else D_HALF))
          else:
            self.spd.x = float(0 if v_input != 0 else (-1 if self.flip.x else 1)) # Default to direction if no h_input

          if v_input != 0:
            self.spd.y = float(v_input * (D_FULL if h_input == 0 else D_HALF))
          else:
            self.spd.y = 0.0 # No vertical speed if no v_input

          # Effects
          g.freeze = 2
          
          # Dash target speeds and accels (explicit float conversions)
          self.dash_target.x = float(2 * g.sign(self.spd.x))
          self.dash_target.y = float((2.0 if self.spd.y >= 0 else 1.5) * g.sign(self.spd.y))
          self.dash_accel.x = float(1.5 if self.spd.y == 0 else 1.06066017177)
          self.dash_accel.y = float(1.5 if self.spd.x == 0 else 1.06066017177)

      # Exit level off the top
      if self.y < -4:
        g.next_room()

    def draw(self):
      """
      Draws the player. This method typically updates the display buffer.
      """
      # Clamp player X position to screen bounds
      if self.x < -1 or self.x > 121:
        self.x = g.clamp(self.x, -1, 121)
        self.spd.x = 0.0


  class balloon(base_obj):
    """A collectible balloon that restores double jumps."""
    def init(self):
      self.timer = 0
      # Expanded hitbox to cover balloon oscillation cycle and remove RNG
      self.hitbox = Rect(-1, -1 - 2, 10, 10 + 4) # Adjust for common sprite size

    def update(self):
      if self.spr == 22: # Active balloon state
        hit = self.check(g.player, 0, 0)
        if hit and hit.djump < g.max_djump:
          hit.djump = g.max_djump
          self.spr = 0 # Hide sprite after collection
          self.timer = 60 # Timer for respawn
      elif self.timer > 0: # Respawn timer running
        self.timer -= 1
      else:
        self.spr = 22 # Balloon respawns

  class platform(base_obj):
    """Moving platform."""
    def init(self):
      self.x -= 4 # Adjust starting X
      self.hitbox.w = 16 # Wider hitbox for platform
      self.last = self.x
      self.dir = -1.0 if self.spr == 11 else 1.0 # Direction based on sprite

    def update(self):
      self.spd.x = self.dir * 0.65 # Constant speed
      if self.x < -16: # Wrap around screen
        self.x = 128
      elif self.x > 128:
        self.x = -16
      
      # If player is not currently on the platform, check if they are above it
      if not self.check(g.player, 0, 0):
        hit = self.check(g.player, 0, -1) # Check one pixel above
        if hit:
          hit.move_x(self.x - self.last, 1) # Move player with platform
      self.last = self.x

  class fruit(base_obj):
    """Collectible fruit that restores double jumps."""
    def init(self):
      self.start = self.y # Initial Y position for oscillation
      self.off = 0 # Offset for sine wave calculation

    def update(self):
      hit = self.check(g.player, 0, 0)
      if hit:
        hit.djump = g.max_djump
        g.destroy_object(self)
      self.off += 1
      # Oscillation using sine wave
      self.y = self.start + math.sin(self.off / 40.0) * 2.5

  class fly_fruit(base_obj):
    """Fruit that flies away after player dashes."""
    def init(self):
      self.fly = False
      self.step = 0.5
      self.solids = False # Doesn't collide with solid tiles

    def update(self):
      if self.fly:
        self.spd.y = g.appr(self.spd.y, -3.5, 0.25)
        if self.y < -16:
          g.destroy_object(self)
      else:
        if g.has_dashed: # Starts flying if player has dashed
          self.fly = True
        self.step += 0.05
        self.spd.y = math.sin(self.step) * 0.5 # Gentle vertical oscillation
      
      hit = self.check(g.player, 0, 0)
      if hit:
        hit.djump = g.max_djump
        g.destroy_object(self)

  class fake_wall(base_obj):
    """A wall that breaks after the player dashes into it, revealing a fruit."""
    def update(self):
      self.hitbox.w = 18 # Temporarily expand hitbox for dash collision detection
      self.hitbox.h = 18
      
      # Check for collision with dashing player
      hit = self.check(g.player, -1, -1)
      if hit and hit.dash_effect_time > 0:
        hit.spd.x = -g.sign(hit.spd.x) * 1.5
        hit.spd.y = -1.5
        hit.dash_time = -1 # Stop current dash
        g.init_object(g.fruit, self.x + 4, self.y + 4, 26) # Spawn fruit
        g.destroy_object(self) # Destroy fake wall
      
      self.hitbox.w = CONST_TILE_SIZE # Reset hitbox
      self.hitbox.h = CONST_TILE_SIZE

  class spring(base_obj):
    """Spring that launches the player."""
    def init(self):
      self.hide_in = 0
      self.hide_for = 0
      self.delay = 0 # Delay for spring animation/reset

    def update(self):
      if self.hide_for > 0:
        self.hide_for -= 1
        if self.hide_for <= 0:
          self.delay = 0
      elif self.spr == 18: # Active spring state
        hit = self.check(g.player, 0, 0)
        if hit and hit.spd.y >= 0: # Player falling onto spring
          self.spr = 19 # Change sprite to compressed state
          hit.y = self.y - 4 # Adjust player position
          hit.spd.x *= 0.2 # Dampen horizontal speed
          hit.spd.y = -3.0 # Launch player upwards
          hit.djump = g.max_djump # Restore double jump
          self.delay = 10 # Animation delay
          
          below = self.check(g.fall_floor, 0, 1)
          if below:
            g.break_fall_floor(below) # Break fall floor if below spring
      elif self.delay > 0: # Spring animation delay
        self.delay -= 1
        if self.delay <= 0:
          self.spr = 18 # Reset spring sprite
      
      if self.hide_in > 0: # Spring hide timer
        self.hide_in -= 1
        if self.hide_in <= 0:
          self.hide_for = 60 # Set duration for being hidden
          self.spr = 0 # Hide spring sprite

  class fall_floor(base_obj):
    """Floor that falls after player steps on it."""
    def init(self):
      self.state = 0 # 0: normal, 1: falling, 2: hidden

    def update(self):
      if self.state == 0: # Normal state
        # Check if player is on or hitting the fall floor
        if self.check(g.player, 0, -1) or self.check(g.player, -1, 0) or self.check(g.player, 1, 0):
          g.break_fall_floor(self)
      elif self.state == 1: # Falling state
        self.delay -= 1
        if self.delay <= 0:
          self.state = 2
          self.delay = 60 # Hidden duration
          self.collideable = False
          self.spr = 0 # Hide sprite
      elif self.state == 2: # Hidden state
        self.delay -= 1
        if self.delay <= 0 and not self.check(g.player, 0, 0): # Respawn if player not on it
          self.state = 0
          self.collideable = True
          self.spr = 23 # Show sprite

  def break_spring(self, obj):
    """Triggers a spring to hide."""
    obj.hide_in = 15

  def break_fall_floor(self, obj):
    """Triggers a fall floor to break and fall."""
    if obj.state == 0:
      obj.state = 1
      obj.delay = 15
      hit = obj.check(g.spring, 0, -1)
      if hit:
        g.break_spring(hit)

  class key(base_obj):
    """Collectible key."""
    def update(self):
      if self.check(g.player, 0, 0):
        g.destroy_object(self)
        g.has_key = True

  class chest(base_obj):
    """Chest that opens with a key."""
    def init(self):
      self.x -= 4 # Adjust position
      self.timer = 20 # Opening animation timer

    def update(self):
      if g.has_key:
        self.timer -= 1
        if self.timer <= 0:
          f = g.init_object(g.fruit, self.x, self.y - 4, 26)
          # Expand fruit hitbox to ensure collection
          f.hitbox.x -= 1
          f.hitbox.w += 3
          g.destroy_object(self)

  # object handling stuff

  def init_object(self, obj_type, x, y, tile=None):
    """
    Initializes and adds a new game object to the objects list.
    """
    o = obj_type(x, y, tile)
    self.objects.append(o)
    if hasattr(o, 'init') and callable(o.init):
      o.init()
    return o

  def destroy_object(self, obj):
    """
    Marks an object for destruction. It will be removed at the end of the update cycle.
    Optimized: Replaces object with None, actual removal happens in _update.
    """
    try:
      self.objects[self.objects.index(obj)] = None
    except ValueError:
      # Object already destroyed or not in list, handle gracefully.
      pass 

  def kill_player(self, obj):
    """Handles player death and room restart."""
    g.destroy_object(obj) # Mark player for destruction
    self.restart_room()

  # helper functions

  def get_player(self):
    """Returns the player object if found, otherwise player_spawn."""
    for o in self.objects:
      if o is not None and (isinstance(o, self.player_spawn) or isinstance(o, self.player)):
        return o
    return None

  def clamp(self, val, a, b):
    """Clamps a value between a minimum and maximum."""
    return max(a, min(b, val))

  def appr(self, val, target, amt):
    """Approaches a value towards a target by a given amount."""
    if val > target:
      return max(val - amt, target)
    else:
      return min(val + amt, target)

  def sign(self, x):
    """Returns the sign of a number (-1, 0, or 1)."""
    if x > 0: return 1
    if x < 0: return -1
    return 0

  def tile_flag_at(self, x, y, w, h, flag):
    """
    Checks if any tile within a given bounding box has a specific flag set.
    Optimized: Uses integer division directly for tile coordinates.
    """
    # Calculate tile coordinates, clamping to map boundaries
    min_tx = max(0, x // CONST_TILE_SIZE)
    max_tx = min(CONST_MAP_WIDTH_TILES - 1, (x + w - 1) // CONST_TILE_SIZE)
    min_ty = max(0, y // CONST_TILE_SIZE)
    max_ty = min(CONST_MAP_HEIGHT_TILES - 1, (y + h - 1) // CONST_TILE_SIZE)

    for i in range(min_tx, max_tx + 1):
      for j in range(min_ty, max_ty + 1):
        if p8.fget(self.tile_at(i, j), flag):
          return True
    return False

  def tile_at(self, x, y):
    """Returns the tile ID at given room-local tile coordinates."""
    return p8.mget(self.room.x * CONST_MAP_WIDTH_TILES + x, self.room.y * CONST_MAP_HEIGHT_TILES + y)

  def spikes_at(self, x, y, w, h, spdx, spdy):
    """
    Checks for collision with spike tiles.
    Optimized: Uses integer division directly for tile coordinates.
    """
    # Calculate tile coordinates, clamping to map boundaries
    min_tx = max(0, x // CONST_TILE_SIZE)
    max_tx = min(CONST_MAP_WIDTH_TILES - 1, (x + w - 1) // CONST_TILE_SIZE)
    min_ty = max(0, y // CONST_TILE_SIZE)
    max_ty = min(CONST_MAP_HEIGHT_TILES - 1, (y + h - 1) // CONST_TILE_SIZE)

    for i in range(min_tx, max_tx + 1):
      for j in range(min_ty, max_ty + 1):
        tile = self.tile_at(i, j)
        
        # Check specific spike tile IDs and their collision conditions
        if (tile == 17 and ((y + h - 1) % CONST_TILE_SIZE >= 6 or y + h == j * CONST_TILE_SIZE + CONST_TILE_SIZE) and spdy >= 0) or \
           (tile == 27 and y % CONST_TILE_SIZE <= 2 and spdy <= 0) or \
           (tile == 43 and x % CONST_TILE_SIZE <= 2 and spdx <= 0) or \
           (tile == 59 and ((x + w - 1) % CONST_TILE_SIZE >= 6 or x + w == i * CONST_TILE_SIZE + CONST_TILE_SIZE) and spdx >= 0):
          return True
    return False

  @property
  def map_data(self):
    """
    Provides the game's map data.
    On RP2040, this would ideally be loaded from a pre-defined bytearray in flash.
    """
    # For actual game, this would return your level map data (e.g., loaded from a file or hardcoded bytearray)
    # The original simply returned b'', implying external map data.
    # Replace this with your actual map data (e.g., self._level_map_data)
    return self._map_data

  @property
  def flag_data(self):
    """
    Provides the game's tile flag data.
    On RP2040, this would ideally be loaded from a pre-defined bytearray in flash.
    """
    # For actual game, this would return your tile flag data
    # Replace this with your actual flag data (e.g., self._tile_flags)
    return self._flag_data

  # Removed __str__ method as it's for debugging and not essential for gameplay on MCU.
